openapi: '3.0.2'
info:
  title: Photofield
  version: '0.1'
servers:
  - url: http://localhost:8080
paths:    
  /collections:
    get:
      description: Get all available collections (sets of files).
      tags: ["Source"]
      responses:
        "200":
          description: List of collections
          content:
            "application/json":
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Collection"

  /collections/{id}:
    get:
      description: Get a specific collection
      tags: ["Source"]
      parameters:
        - name: id
          in: path
          required: true
          description: Opaque identifier
          schema:
            $ref: "#/components/schemas/CollectionId"
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Collection"
        "404":
          description: Collection not found
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Problem"

  /scenes:
    post:
      description: Create a new scene using the provided parameters
      tags: ["Display"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SceneParams"
      responses:
        "202":
          description: Accepted, it might take some time for it to fully finish creating.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Scene"
        "400":
          description: Bad request parameters
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Problem"
    get:
      description: Get existing scenes matching the provided parameters
      tags: ["Display"]
      parameters:
        - name: collection_id
          in: query
          required: true
          description: Collection ID
          schema:
            $ref: "#/components/schemas/CollectionId"
            
        - name: viewport_width
          in: query
          schema:
            $ref: "#/components/schemas/ViewportWidth"

        - name: viewport_height
          in: query
          schema:
            $ref: "#/components/schemas/ViewportHeight"

        - name: image_height
          in: query
          schema:
            $ref: "#/components/schemas/ImageHeight"

        - name: layout
          in: query
          schema:
            $ref: "#/components/schemas/LayoutType"

        - name: sort
          in: query
          schema:
            $ref: "#/components/schemas/Sort"

        - name: search
          in: query
          schema:
            $ref: "#/components/schemas/Search"

        - name: limit
          in: query
          schema:
            $ref: "#/components/schemas/Limit"

      responses:
        "200":
          description: List of scenes created for the specified collection
          content:
            "application/json":
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Scene"
  
  /scenes/{id}:
    get:
      description: Get a previously created scene
      tags: ["Display"]
      parameters:
        - name: id
          in: path
          required: true
          description: Opaque randomly generated identifier
          schema:
            $ref: "#/components/schemas/SceneId"
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Scene"
        "404":
          description: Scene not found
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Problem"

  /scenes/{scene_id}/tiles:
    get:
      description: Get a rendered tile
      tags: ["Display"]
      parameters:

        - name: scene_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/SceneId"

        - name: tile_size
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            example: 256
            
        - name: background_color
          in: query
          schema:
            type: string
            example: "#000000"
            
        - name: transparency_mask
          in: query
          schema:
            type: boolean
            
        - name: zoom
          in: query
          required: true
          schema:
            type: integer
            minimum: 0
            example: 3
            
        - name: "x"
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/TileCoord"
            
        - name: "y"
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/TileCoord"

        - name: sources
          in: query
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false

        - name: select_tag
          description: Show images with this tag as selected.
          in: query
          schema:
            type: string
            
        - name: debug_overdraw
          in: query
          schema:
            type: boolean
            example: false
            
        - name: debug_thumbnails
          in: query
          schema:
            type: boolean
            example: false

      responses:
        "200":
          description: OK
          content:
            "image/jpeg":
              schema:
                type: string
                format: binary

  /scenes/{scene_id}/dates:
    get:
      description: Get layout photo dates
      tags: ["Display"]
      parameters:

        - name: scene_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/SceneId"

        - name: height
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 10000
            example: 1920

      responses:
        "200":
          description: OK
          content:
            "application/octet-stream":
              schema:
                type: string
                format: binary
                description: List of `height` uint32-encoded Unix timestamps of photos in the layout

  /scenes/{scene_id}/regions:
    get:
      description: Get regions within a certain bounding box
      tags: ["Display"]
      parameters:

        - name: scene_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/SceneId"

        - name: file_id
          in: query
          required: false
          schema:
            $ref: "#/components/schemas/FileId"

        - name: "x"
          in: query
          required: false
          schema:
            type: number
            example: 10
    
        - name: "y"
          in: query
          required: false
          schema:
            type: number
            example: 200
    
        - name: w
          in: query
          required: false
          schema:
            type: number
            example: 300
    
        - name: h
          in: query
          required: false
          schema:
            type: number
            example: 200

        - name: limit
          in: query
          schema:
            $ref: "#/components/schemas/Limit"
    
      responses:
        "200":
          description: Region list
          content:
            "application/json":
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Region"


  /scenes/{scene_id}/regions/{id}:
    get:
      description: Get a specific region
      tags: ["Display"]
      parameters:
        - name: scene_id
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/SceneId"

        - name: id
          in: path
          required: true
          description: Region ID
          schema:
            $ref: "#/components/schemas/RegionId"
      responses:
        "200":
          description: OK
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Region"
        "404":
          description: Region not found
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Problem"

  /files/{id}:
    get:
      description: Get a file (referenced by region data)
      tags: ["Files"]
      parameters:
        - $ref: "#/components/parameters/FileIdPathParam"
      responses:
        "200":
          $ref: "#/components/responses/FileResponse"
        "404":
          $ref: "#/components/responses/FileNotFound"

  /files/{id}/original/{filename}:
    get:
      description: Get a file via with an arbitrary filename as part of the URL
      tags: ["Files"]
      parameters:
        - $ref: "#/components/parameters/FileIdPathParam"
        - $ref: "#/components/parameters/FilenamePathParam"
      responses:
        "200":
          $ref: "#/components/responses/FileResponse"
        "404":
          $ref: "#/components/responses/FileNotFound"

  /files/{id}/variants/{size}/{filename}:
    get:
      description: Get an image or resized video variant/thumbnail of the
        specified predefined size and with an arbitrary filename as part of the URL
      tags: ["Files"]
      parameters:
        - $ref: "#/components/parameters/FileIdPathParam"
        - $ref: "#/components/parameters/FilenamePathParam"
        - $ref: "#/components/parameters/SizePathParam"
      responses:
        "200":
          $ref: "#/components/responses/FileResponse"
        "404":
          $ref: "#/components/responses/FileNotFound"

  /tags:
    get:
      description: Retrieve a list of tags
      tags: ["Tags"]
      parameters:
        - $ref: "#/components/parameters/SearchParam"
      responses:
        "200":
          description: List of tags retrieved successfully
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                properties:
                  items:
                    $ref: "#/components/schemas/Tags"
    post:
      description: Add tag
      tags: ["Tags"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagsPost"
      responses:
        "201":
          description: Tag created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"

  /tags/{id}:
    get:
      description: Get a specific tag
      tags: ["Tags"]
      parameters:
        - $ref: "#/components/parameters/TagIdPathParam"
      responses:
        "200":
          description: Tag retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"

  /tags/{id}/files:
    post:
      description: Perform an operation on the files for this specific tag.
      tags: ["Tags"]
      parameters:
        - $ref: "#/components/parameters/TagIdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TagFilesPost"
      responses:
        "200":
          description: Tag operation successfully completed on the files.

  /tags/{id}/files-tags:
    get:
      description: Get all tags of files with the specified tag
      tags: ["Tags"]
      parameters:
        - $ref: "#/components/parameters/TagIdPathParam"
      responses:
        "200":
          description: List of tags
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                properties:
                  items:
                    $ref: "#/components/schemas/Tags"
                  files_count:
                    type: integer
                    minimum: 0
                    example: 13

  /tasks:
    post:
      description: Create a new task e.g. scan the file system for files
        in directories specified in the provided collection.
      tags: ["System"]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - collection_id
              properties:
                type:
                  $ref: "#/components/schemas/TaskType"
                collection_id:
                  $ref: "#/components/schemas/CollectionId"
      responses:
        "202":
          description: Accepted, it might take some time for the task to finish.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "409":
          description: Conflict, task already in progress for the 
            specified parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
    get:
      description: Get currently running tasks.
      tags: ["System"]
      parameters:
        - name: type
          in: query
          description: Task type to filter on.
          schema:
            $ref: "#/components/schemas/TaskType"
        - name: collection_id
          in: query
          description: Collection ID for the tasks
          schema:
            $ref: "#/components/schemas/CollectionId"
      responses:
        "200":
          description: List of tasks
          content:
            "application/json":
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items:
                      $ref: "#/components/schemas/Task"

  /capabilities:
    get:
      description: Get the current capabilities of the system.
      tags: ["System"]
      responses:
        "200":
          description: Capabilities
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Capabilities"




components:
  responses:
    FileResponse:
      description: Raw binary file (image or video)
      content:
        "image/*":
          schema:
            $ref: "#/components/schemas/File"
    FileNotFound:
      description: Raw binary file (image or video)
      content:
        "image/*":
          schema:
            $ref: "#/components/schemas/File"

  parameters:
    SearchParam:
      name: q
      in: query
      description: Search custom text query
      schema:
        $ref: "#/components/schemas/Search"

    TagIdPathParam:
      name: id
      in: path
      required: true
      description: Tag ID
      schema:
        $ref: "#/components/schemas/TagId"

    FileIdPathParam:
      name: id
      in: path
      required: true
      description: File ID
      schema:
        $ref: "#/components/schemas/FileId"

    FilenamePathParam:
      name: filename
      in: path
      required: true
      description: Arbitrary file name, used for better UX when opened
        directly in a browser.
      schema:
        type: string
        example: photo.jpg

    SizePathParam:
      name: size
      in: path
      required: true
      description: Thumbnail size type label
      schema:
        type: string
        example: M

  schemas:
    Scene:
      type: object
      required:
        - id
      properties:
        id:
          $ref: "#/components/schemas/SceneId"
        bounds:
          $ref: "#/components/schemas/Bounds"
        file_count:
          type: integer
          minimum: 0
          example: 506
        load_count:
          type: integer
          minimum: 0
          example: 123
        load_unit:
          type: string
          example: files
          default: files
        loading:
          type: boolean
          description: True while the scene is loading and the dimensions are not yet known.
        error:
          type: string
          description: Any error encountered while loading the scene

    Collection:
      type: object
      required:
        - id
      properties:
        id:
          $ref: "#/components/schemas/CollectionId"
        name:
          type: string
          description: User-friendly name
          example: Vacation Photos
        indexed_at:
          type: string
          format: date-time
          description: Time of latest performed full index

    IndexTask:
      type: object
      properties:
        collection_id:
          $ref: "#/components/schemas/CollectionId"
        count:
          type: integer
          minimum: 0
          example: 13
          description: Number of files found since the start of the indexing.
          
    Task:
      type: object
      required:
        - id
        - name
      properties:
        id:
          $ref: "#/components/schemas/TaskId"
        type:
          $ref: "#/components/schemas/TaskType"
        name:
          type: string
        collection_id:
          $ref: "#/components/schemas/CollectionId"
        pending:
          type: integer
          minimum: 0
          example: 13
          description: Number of items pending as part of the task.
        done:
          type: integer
          minimum: 0
          example: 
          description: Number of items already processed.
    
    Capabilities:
      type: object
      required:
        - search
        - tags
        - docs
      properties:
        search:
          $ref: "#/components/schemas/Capability"
        tags:
          $ref: "#/components/schemas/Capability"
        docs:
          $ref: "#/components/schemas/DocsCapability"
          
    Capability:
      type: object
      required:
        - supported
      properties:
        supported:
          type: boolean

    DocsCapability:
      allOf:
        - $ref: "#/components/schemas/Capability"
        - type: object
          required: 
            - url
          properties:
            url:
              type: string
              description: URL to the documentation to link to from the UI.
              default: /docs/usage
          
    Region:
      type: object
      required:
        - id
        - bounds
      properties:
        id:
          $ref: "#/components/schemas/RegionId"
        bounds:
          $ref: "#/components/schemas/Bounds"
        data:
          $ref: "#/components/schemas/RegionData"

    RegionData:
      type: object

    File:
      type: string
      format: binary

    SceneParams:
      type: object
      required:
        - collection_id
        - viewport_width
        - viewport_height
        - layout
      properties:
        collection_id:
          $ref: "#/components/schemas/CollectionId"
        viewport_width:
          $ref: "#/components/schemas/ViewportWidth"
        viewport_height:
          $ref: "#/components/schemas/ViewportHeight"
        image_height:
          $ref: "#/components/schemas/ImageHeight"
        layout:
          $ref: "#/components/schemas/LayoutType"
        search:
          $ref: "#/components/schemas/Search"
        sort:
          $ref: "#/components/schemas/Sort"
          
    TagsPost:
      type: object
      description: Create a new tag based on the provided parameters.
      properties:
        selection:
          type: boolean
        collection_id:
          $ref: "#/components/schemas/CollectionId"
  
    TagFilesPost:
      type: object
      description: |
        Perform the specified tag operation for the specified files.
        You need to provide either a `scene_id` & `bounds` or `file_id`.
      required:
        - op
      properties:
        op:
          $ref: "#/components/schemas/Operation"
        scene_id:
          $ref: "#/components/schemas/SceneId"
        bounds:
          $ref: "#/components/schemas/Bounds"
        file_id:
          $ref: "#/components/schemas/FileId"
        tag_id:
          $ref: "#/components/schemas/TagId"

    Tags:
      type: array
      items:
        $ref: "#/components/schemas/Tag"

    Tag:
      type: object
      properties:
        id:
          type: string
        name:
          type: string

          
    TaskType:
      type: string
      enum:
        - INDEX_FILES
        - INDEX_METADATA
        - INDEX_CONTENTS
        - INDEX_CONTENTS_COLOR
        - INDEX_CONTENTS_AI
    
    CollectionId:
      type: string
      example: vacation-photos
    
    TaskId:
      type: string
      example: index-vacation-photos
    
    Operation:
      type: string
      enum:
        - ADD
        - SUBTRACT
        - INVERT

    SceneId:
      type: string
      example: Tqcqtc6h69

    ViewportWidth:
      type: number
      minimum: 0
      example: 1200

    ViewportHeight:
      type: number
      minimum: 0
      example: 800

    ImageWidth:
      type: number
      minimum: 0
      example: 400

    ImageHeight:
      type: number
      minimum: 0
      example: 300

    RegionId:
      type: integer
      example: 0

    FileId:
      type: integer
      example: 0

    TagId:
      type: string
      example: fav

    TileCoord:
      type: integer
      minimum: 0
      example: 0

    Sources:
      type: array


    Bounds:
      type: object
      required:
        - "x"
        - "y"
        - "w"
        - "h"
      properties:
        "x":
          type: number
        "y":
          type: number
        "w":
          type: number
          minimum: 0
          example: 1200
        "h":
          type: number
          minimum: 0
          example: 90000
    
    Search:
      type: string

    Sort:
      type: string

    Limit:
      type: integer
      example: 3

    LayoutType:
      type: string
      enum:
        - TIMELINE
        - ALBUM
        - SQUARE
        - WALL
        - STRIP

    Problem:
      type: object
      properties:
        status:
          type: integer
          format: int32
          description: >
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        title:
          type: string
          description: >
            A short summary of the problem type. Written in English and readable
            for engineers, usually not suited for non technical stakeholders and
            not localized.
          example: Service Unavailable
