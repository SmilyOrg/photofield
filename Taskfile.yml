version: '3'

vars:
  BINARY_NAME: photofield
  DOCKER_REPO: ghcr.io/smilyorg/photofield
  BUILD_OS_ARCH:
    # - android/arm64
    - darwin/amd64
    - darwin/arm64
    - freebsd/386
    - freebsd/amd64
    - freebsd/arm
    - freebsd/arm64
    - linux/386
    - linux/amd64
    - linux/arm
    - linux/arm64
    - linux/loong64
    - linux/ppc64le
    - linux/riscv64
    - linux/s390x
    - netbsd/amd64
    - openbsd/amd64
    - openbsd/arm64
    - windows/386
    - windows/amd64
    - windows/arm64
  DOCKER_ARCH:
    - amd64
    - arm64
  VERSION:
    sh: git describe --tags --match "v*" --always --dirty

tasks:
  release:local:
    cmds:
      - task: tidy
      - task: generate
      - task: build:deps
      - task: package:archives
      - task: package:checksums
      - task: package:docker:all

  tidy:
    cmds:
      - go mod tidy
  

  generate:
    cmds:
      - go generate -x
  

  build:deps:
    deps:
      - build:docs
      - build:ui

  build:docs:
    dir: docs
    cmds:
      - npm install
      - npm run docs:build

  build:ui:
    dir: ui
    cmds:
      - npm install
      - npm run build -- --clearScreen=false -l warn

  build:binary:all:
    deps:
      - for:
          var: BUILD_OS_ARCH
        task: build:binary
        vars:
          GOOS: "{{(.ITEM | split \"/\")._0}}"
          GOARCH: "{{(.ITEM | split \"/\")._1}}"
          OUTPUT:
            sh: |
              OS="{{(.ITEM | split "/")._0}}"
              ARCH="{{(.ITEM | split "/")._1}}"
              OUTPUT="dist/bin/{{.BINARY_NAME}}_{{.VERSION}}_${OS}_${ARCH}"
              if [ "$OS" = "windows" ]; then
                OUTPUT="${OUTPUT}.exe"
              fi
              echo $OUTPUT
    silent: true

  build:binary:
    requires:
      vars:
        - GOOS
        - GOARCH
        - OUTPUT
    generates:
      - "{{.OUTPUT}}"
    cmds:
      - |
        set -eou pipefail
        echo "build {{.OUTPUT}}"
        VERSION={{.VERSION}}
        COMMIT=$(git rev-parse HEAD)
        DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
        BUILT_BY=$(whoami)
        GOOS={{.GOOS}} GOARCH={{.GOARCH}} CGO_ENABLED=0 go build \
          -ldflags "-X main.version=$VERSION -X main.commit=$COMMIT -X main.date=$DATE -X main.builtBy=$BUILT_BY" \
          -tags embedui,embeddocs,embedgeo \
          -o "{{.OUTPUT}}" \
          || echo "build failed for {{.OUTPUT}}"
    silent: true

  package:archive:all:
    deps:
      - for:
          var: BUILD_OS_ARCH
        task: package:archive
        vars:
          GOOS:
            sh: "echo {{.ITEM}} | cut -d'/' -f1"
          GOARCH:
            sh: "echo {{.ITEM}} | cut -d'/' -f2"

  package:archive:dir:
    dir: dist/archives

  package:archive:
    requires:
      vars:
        - GOOS
        - GOARCH
    vars:
      INPUT:
        sh: |
          OUTPUT="dist/binaries/{{.BINARY_NAME}}_{{.VERSION}}_{{.GOOS}}_{{.GOARCH}}"
          if [ "$OS" = "windows" ]; then
            OUTPUT="${OUTPUT}.exe"
          fi
          echo $OUTPUT
      OUTPUT:
        sh: echo "dist/archives/{{.BINARY_NAME}}_{{.VERSION}}_{{.GOOS}}_{{.GOARCH}}.zip"
    sources:
      - "{{.INPUT}}"
    generates:
      - "{{.OUTPUT}}"
    deps:
      - task: package:archive:dir
      - task: build:binary
        vars:
          GOOS: "{{.GOOS}}"
          GOARCH: "{{.GOARCH}}"
          OUTPUT: "{{.INPUT}}"
    cmds:
      - go run ./cmd/zip "{{.OUTPUT}}" "{{.INPUT}}"

  package:checksums:
    dir: dist/archives
    cmds:
      - go run ../../cmd/sha256 *.zip > checksums.txt

  # package:docker:all:
  #   cmds:
  #     - docker buildx create --use
  #     - docker buildx build --pull --platform linux/amd64 -t {{.DOCKER_REPO}}:latest-amd64 -f Dockerfile-goreleaser .
  #     - docker buildx build --pull --platform linux/arm64 -t {{.DOCKER_REPO}}:latest-arm64 -f Dockerfile-goreleaser .
  #     - docker push {{.DOCKER_REPO}}:latest-amd64
  #     - docker push {{.DOCKER_REPO}}:latest-arm64
  #     - docker manifest create {{.DOCKER_REPO}}:latest 
  #         --amend {{.DOCKER_REPO}}:latest-amd64 
  #         --amend {{.DOCKER_REPO}}:latest-arm64
  #     - docker manifest push {{.DOCKER_REPO}}:latest

  package:docker:all:
    deps:
      - for:
          var: DOCKER_ARCH
          as: ARCH
        task: package:docker
        vars:
          ARCH: "{{.ARCH}}"
          BINARY: "{{.BINARY_NAME}}_{{.VERSION}}_linux_{{.ARCH}}"
    vars:
      AMENDS: >
        {{$root := .}}{{range .DOCKER_ARCH}}
        --amend {{$root.DOCKER_REPO}}:{{$root.VERSION}}-{{.}}
        {{end}}
      ARCH_IMAGES: >
        {{$root := .}}{{range .DOCKER_ARCH}}
        {{$root.DOCKER_REPO}}:{{$root.VERSION}}-{{.}}
        {{end}}
      IMAGE: "{{.DOCKER_REPO}}:{{.VERSION}}"
    cmds:
      - docker manifest create {{.IMAGE}} {{.ARCH_IMAGES}}
      # - docker push {{.DOCKER_REPO}}:latest-amd64
      # - docker push {{.DOCKER_REPO}}:latest-arm64
      # - docker manifest create {{.DOCKER_REPO}}:latest 
      #     --amend {{.DOCKER_REPO}}:latest-amd64 
      #     --amend {{.DOCKER_REPO}}:latest-arm64
      # - docker manifest push {{.DOCKER_REPO}}:latest

  package:docker:
    dir: dist/binaries
    requires:
      vars:
        - ARCH
        - BINARY
    vars:
      IMAGE: "{{.DOCKER_REPO}}:{{.VERSION}}-{{.ARCH}}"
    # sources:
    #   - dist/binaries/{{.BINARY}}
    #   - Dockerfile-goreleaser
    cmds:
      # - docker buildx build --platform linux/{{.ARCH}} --build-arg binary={{.BINARY}} -t {{.IMAGE}} -f ../../Dockerfile-goreleaser .
      - docker build --platform=linux/{{.ARCH}} --build-arg binary={{.BINARY}} -t {{.IMAGE}} --progress=plain -f ../../Dockerfile-goreleaser .

  package:docker:multi:
    dir: dist/binaries
    vars:
      ARCH_IMAGES: >
        {{$root := .}}{{range .DOCKER_ARCH}}
        {{$root.DOCKER_REPO}}:{{$root.VERSION}}-{{.}}
        {{end}}
      ARCHS: "{{range $index, $arch := .DOCKER_ARCH}}{{if $index}},{{end}}linux/{{$arch}}{{end}}"
      IMAGE: "{{.DOCKER_REPO}}:{{.VERSION}}"
    cmds:
      - docker build --pull --platform {{.ARCHS}} --build-arg VERSION={{.VERSION}} -t {{.IMAGE}} -f ../../Dockerfile-multi .
