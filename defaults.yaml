# Defines collections / albums that are scanned and shown in the UI
collections:
  # By default show all subdirs of the current working directory
  - expand_subdirs: true
    expand_sort: desc
    dirs: ["./"]

  # - name: Collection Name
  #   layout: album | timeline | wall
  #   limit: integer number of photos to limit to (for testing large collections)
  #   expand_subdirs: true | false (expand subdirs of `dirs` to collections)
  #   expand_sort: asc | desc (order of expanded subdirs)
  #   dirs:
  #     - /first/dir
  #     - /second/dir
  #     - C:/third/windows/dir
  #     - ./relative/dir

# Default layout of all collections
layout:
  type: ALBUM

render:
  # The area at which photos are rendered as a solid color.
  # The larger it is, the faster rendering will be, but also the more you will
  # have to zoom in to see the photo and not just a single solid color.
  max_solid_pixel_area: 1000
  # Default tile size, the UI controls this directly, so it's only relevant for
  # other use-cases.
  tile_size: 256

ai:
  # Host of an AI server providing machine learning features. Defining this
  # will enable search functionality on collection pages.
  # See https://github.com/SmilyOrg/photofield-ai on how to set it up
  # 
  # host: http://localhost:8081
  # 
  # You can also define the visual (image scanning) host and the 
  # textual search host separately, e.g. to scan images with a PC w/ GPU,
  # but keep the search part on a NAS.
  # 
  # visual:
    # host: http://localhost:8081
  # textual:
    # host: http://localhost:8081

media:
  # Extract metadata from this many files concurrently
  concurrent_meta_loads: 8
  
  # Extract prominent colors from this many files concurrently
  concurrent_color_loads: 4
  
  # Extract AI embeddings from this many files concurrently
  concurrent_ai_loads: 8
  
  # Number of exiftool instances to run concurrently for metadata extraction
  exif_tool_count: 4

  # Set to true to not extract any metadata or colors from photos
  skip_load_info: false
  
  caches:
    image:
      # Size of the image cache used while rendering images
      # A larger cache might make display/rendering faster, while a smaller
      # cache will conserve memory.
      max_size: 256Mi
    
  # File extensions to index on the file system
  extensions: [
    ".jpg", ".jpeg", ".png", ".avif", ".bmp", ".pam", ".ppm", ".jxl", ".exr", ".cr2", ".dng",
    ".mp4",
  ]

  # Used to extract dates from file names as a heuristic in case of missing or
  # metadata or metadata yet to be loaded.
  # Uses the Golang date format: https://pkg.go.dev/time#pkg-constants
  date_formats: ["20060201_150405"]
  images:
    # Extensions to use to understand a file to be an image
    # extensions: [".jpg", ".jpeg", ".png", ".gif"]
    extensions: [".jpg", ".jpeg", ".png", ".avif", ".bmp", ".pam", ".ppm", ".jxl", ".exr", ".cr2", ".dng"]

  videos:
    extensions: [".mp4"]

  # Pre-generated thumbnail configuration, these thumbnails will be used to
  # greatly speed up the rendering
  thumbnails:

    # name: Short thumbnail type name
    #
    # path: Path template where to find the thumbnail.
    #   {{.Dir}} is replaced by the parent directory of the original photo
    #   {{.Filename}} is replaced by the original photo filename
    #
    # fit: Aspect ratio fit of the thumbnail in case it doesn't match the
    #      original photo.
    #
    #   INSIDE
    #     The thumbnail size is the maximum size of each dimension, so in case
    #     of different aspect ratios, one dimension will always be smaller.
    #
    #   OUTSIDE
    #     The thumbnail size is the minimum size of each dimension, so in case
    #     of different aspect ratios, one dimension will always be bigger.
    #
    #   ORIGINAL
    #     The size of the thumbnail is equal the size of the original. Mostly
    #     useful for transcoded or differently encoded files.
    #
    # width
    # height: Predefined thumbnail dimensions used to pick the most
    #         appropriately-sized thumbnail for the zoom level. 
    # 
    # extra_cost: Additional weight to add when picking the closest thumbnail.
    #             Higher number means that other thumbnails will be preferred
    #             if they exist.

    #
    # Embedded JPEG thumbnail
    #
    - name: exif-thumb
      exif: ThumbnailImage
      extensions: [".jpg", ".jpeg"]
      fit: INSIDE
      width: 120
      height: 120
      # It's expensive to extract, so this makes it more of a last resort, but
      # still a lot better than loading the original photo.
      extra_cost: 10
      
    #
    # Synology Moments / Photo Station thumbnails
    #
    - name: S
      path: "{{.Dir}}@eaDir/{{.Filename}}/SYNOPHOTO_THUMB_S.jpg"
      extensions: [".jpg", ".jpeg", ".png", ".gif", ".mp4"]
      fit: INSIDE
      width: 120
      height: 120
      
    - name: SM
      path: "{{.Dir}}@eaDir/{{.Filename}}/SYNOPHOTO_THUMB_SM.jpg"
      extensions: [".jpg", ".jpeg", ".png", ".gif", ".mp4"]
      fit: OUTSIDE
      width: 240
      height: 240
      
    - name: M
      path: "{{.Dir}}@eaDir/{{.Filename}}/SYNOPHOTO_THUMB_M.jpg"
      extensions: [".jpg", ".jpeg", ".png", ".gif", ".mp4"]
      fit: OUTSIDE
      width: 320
      height: 320
      
    - name: B
      path: "{{.Dir}}@eaDir/{{.Filename}}/SYNOPHOTO_THUMB_B.jpg"
      extensions: [".jpg", ".jpeg", ".png", ".gif"]
      fit: INSIDE
      width: 640
      height: 640
      
    - name: XL
      path: "{{.Dir}}@eaDir/{{.Filename}}/SYNOPHOTO_THUMB_XL.jpg"
      extensions: [".jpg", ".jpeg", ".png", ".gif", ".mp4"]
      fit: OUTSIDE
      width: 1280
      height: 1280
      
    #
    # Synology Moments / Photo Station video variants
    #
    - name: FM
      path: "{{.Dir}}@eaDir/{{.Filename}}/SYNOPHOTO_FILM_M.mp4"
      extensions: [".mp4"]
      fit: OUTSIDE
      width: 720
      height: 720
      
    - name: H264
      path: "{{.Dir}}@eaDir/{{.Filename}}/SYNOPHOTO_FILM_H264.mp4"
      extensions: [".mp4"]
      fit: ORIGINAL
